# -*- coding: utf-8 -*-
"""Thesiswork.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Uq_V9X0nt3LDsLyaErcL-4X5710D-PY5
"""

import numpy as np
import pandas as pd
from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier
from sklearn.gaussian_process.kernels import RBF
from sklearn.naive_bayes import GaussianNB
from sklearn.neural_network import MLPClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.gaussian_process import GaussianProcessClassifier

dataset = pd.read_csv("Prediction1.csv")


x=dataset.iloc[:, 0:5].values
y=dataset.iloc[:, 8].values

dataset.head()

from sklearn.preprocessing import LabelEncoder, OneHotEncoder
l_n = LabelEncoder()

x[:, 1]=l_n.fit_transform(x[:, 1])
x[:, 2]=l_n.fit_transform(x[:, 2])
x[:, 3]=l_n.fit_transform(x[:, 3])
x[:, 4]=l_n.fit_transform(x[:, 4])
# Decimal to binary encoder
onehotencoder=OneHotEncoder(categorical_features=[1])
x=onehotencoder.fit_transform(x).toarray()

onehotencoder=OneHotEncoder(categorical_features=[2])
x=onehotencoder.fit_transform(x).toarray()

onehotencoder=OneHotEncoder(categorical_features=[3])
x=onehotencoder.fit_transform(x).toarray()

onehotencoder=OneHotEncoder(categorical_features=[4])
x=onehotencoder.fit_transform(x).toarray()

X_train, X_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state=0)


# Feature Scaling
from sklearn.preprocessing import StandardScaler
sc_x= StandardScaler()
X_train= sc_x.fit_transform(X_train)
X_test= sc_x.transform(X_test)

names = ["Logistic Regression", "Linear SVM", "Random Forest", "Adaboost", "Naive Bayes",
         "Neural Net", "KNN Classifier", "Decision Tree"]
classifiers = [
    LogisticRegression(solver='sag'),
    SVC(kernel="linear", C=0.025),
    RandomForestClassifier(max_depth=5, n_estimators=10),
    AdaBoostClassifier(n_estimators = 50),
    GaussianNB(),
    MLPClassifier(alpha=1),
    KNeighborsClassifier(39),
    DecisionTreeClassifier(max_depth=5),
    ]

for name, clf in zip(names, classifiers):
    print("=================",name,"====================")
    clf.fit(X_train, y_train)
    y_pred = clf.predict(X_test)
    print(classification_report(y_test, y_pred))
    print(confusion_matrix(y_test, y_pred))
    print(name,' accuracy is',accuracy_score(y_pred,y_test))

